name: Chat-WF

on:
  push:
    branches:
      - master-ci
      - release/**
      - teams/**

  workflow_dispatch:
    inputs:
      version:
        description: 'Version for build artifacts'     
        required: true
        default: ''
      depVersion:
        description: 'Version for LCT foundation build artifacts'     
        required: true
        default: '' 
      platformVersion:
        description: 'Version for LCT platform build artifacts'     
        required: true
        default: ''    
      foundationBuildNumber:
        description: 'LCT foundation dependency build number'     
        required: true
        default: ''   

env:
  TARGET_PRODUCT: luminate-lct
  CONTAINER_REGISTRY : 'dctcontainerregistry.azurecr.io'
  SNAPSHOT_VERSION: 2022.5.0


jobs:        
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: 'PREP - GitHub Context'
        env:
            GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: 'SETUP - Checkout Branch Code'
        uses: actions/checkout@v2

      - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}' |  sed 's/plat-lct-//g')" >> $GITHUB_ENV
        shell: bash
      - name: Get branch names
        id: branch-name
        uses: tj-actions/branch-names@v5 
      - name: Current branch name
        run: |
          echo "BRANCH=${{ steps.branch-name.outputs.current_branch }}" >>  $GITHUB_ENV
          echo "BRANCH_VERSION=`git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,'`" >>  $GITHUB_ENV
      - name: Setting Env variables 
        if: startsWith(github.ref, 'refs/heads/release/') 
        env:
           LABEL: rc
        run: | 
          echo "BUILD_VERSION=${{env.BRANCH_VERSION}}-${{env.LABEL}}-${{github.run_number}}" >> $GITHUB_ENV
          if [[ "${{ github.event.inputs.foundationBuildNumber }}" != "" ]] ; then
          echo "DEP_VERSION_LOOKUP=${{env.BRANCH_VERSION}}-${{env.LABEL}}-${{ github.event.inputs.foundationBuildNumber }}" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.foundationBuildNumber }}" == "" ]] ; then
          echo "DEP_VERSION_LOOKUP=${{env.BRANCH_VERSION}}-${{env.LABEL}}+" >> $GITHUB_ENV
          echo "PLATFORM_VERSION_LOOKUP=${{env.BRANCH_VERSION}}-${{env.LABEL}}+" >> $GITHUB_ENV
      - name: Setting Env variables 
        if: startsWith(github.ref, 'refs/heads/teams/') 
        env:
          LABEL: ${{env.BRANCH_VERSION}}
        run: | 
         
          echo "BUILD_VERSION=${{env.SNAPSHOT_VERSION}}-${{env.LABEL}}" >> $GITHUB_ENV
          echo "DEP_VERSION_LOOKUP=${{env.SNAPSHOT_VERSION}}-${{env.LABEL}}" >> $GITHUB_ENV
          echo "PLATFORM_VERSION_LOOKUP=${{env.SNAPSHOT_VERSION}}-SNAPSHOT" >> $GITHUB_ENV
      - name: Setting Env variables 
        if: contains(github.ref, 'master-ci') 
        env:
          LABEL: SNAPSHOT
        run: | 
         
          echo "BUILD_VERSION=${{env.SNAPSHOT_VERSION}}-${{env.LABEL}}" >> $GITHUB_ENV
          echo "DEP_VERSION_LOOKUP=${{env.SNAPSHOT_VERSION}}-${{env.LABEL}}" >> $GITHUB_ENV      
          echo "PLATFORM_VERSION_LOOKUP=${{env.SNAPSHOT_VERSION}}-${{env.LABEL}}" >> $GITHUB_ENV
      - name: 'SETUP - JAVA JDK 14'
        uses: actions/setup-java@v2
        with:
            java-version: 14
            distribution: 'zulu'
    
      - name: 'GRANT PERMISSION - Grant execute permission for gradlew'
        run: chmod +x gradlew

      - name: 'SETUP - Cache Gradle packages'
        uses: actions/cache@v2
        with:
            path: |
              ~/.gradle/caches
              ~/.gradle/wrapper
            key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
            restore-keys: |
              ${{ runner.os }}-gradle-
      - name: 'SETUP - gradle.properties'
        run: |
          echo "artifactoryContextUrl=${{ secrets.LCT_ARTIFACTORY_CONTEXT_URL }}" >> gradle.properties
          echo "artifactoryUsername=${{ secrets.LCT_ARTIFACTORY_USERNAME }}" >> gradle.properties
          echo "artifactoryPassword=${{ secrets.LCT_ARTIFACTORY_PASSWORD }}" >> gradle.properties
      - name: 'BUILD - Service'
        uses: gradle/gradle-build-action@v2
        with: 
          arguments: |
              -Dorg.gradle.internal.http.socketTimeout=120000 
              -Dorg.gradle.internal.http.connectionTimeout=120000
              -Pversion=${{env.BUILD_VERSION}}
              -PdepVersion=${{env.DEP_VERSION_LOOKUP}}
              -PplatformVersion=${{env.PLATFORM_VERSION_LOOKUP}}
              clean bootJar check
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: |
            build/test-results/**/*.xml
      - name: Publish reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Test-reports
          path: |
            build/reports
            build/test-results
          retention-days: 1                
      - name: 'STATIC CHECK - Run Codacy Analysis'
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: build/reports/jacoco/test/jacocoTestReport.xml  
      - name: 'PACKAGE - Upload Artifact'
        if: startsWith(github.ref, 'refs/heads/release/') || contains(github.ref, 'master-ci') || contains(github.ref, 'teams/test')
        uses: gradle/gradle-build-action@v2 
        with:
          arguments: |        
              -Dorg.gradle.internal.http.socketTimeout=120000 
              -Dorg.gradle.internal.http.connectionTimeout=120000
              -Pversion=${{env.BUILD_VERSION}}
              -PdepVersion=${{env.DEP_VERSION_LOOKUP}}
              -PplatformVersion=${{env.PLATFORM_VERSION_LOOKUP}}
              artifactoryPublish
      - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}' |  sed 's/plat-lct-//g')" >> $GITHUB_ENV
        shell: bash        
      - name: 'RUN - Build Docker image'
        run: docker build . -f Dockerfile --build-arg app=${{env.REPOSITORY_NAME}} --build-arg version=${{env.BUILD_VERSION}}-${{github.run_number}} --tag ${{env.REPOSITORY_NAME}}
    
      - name: 'RUN - Push Image to ACR'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JDA_PD_DEV_TEST }}
      - run: az acr login -n dctContainerRegistry
      - run: docker tag ${{env.REPOSITORY_NAME}}:latest ${{env.CONTAINER_REGISTRY}}/${{env.REPOSITORY_NAME}}:${{env.BUILD_VERSION}}-${{github.run_number}}
      - run: docker push ${{env.CONTAINER_REGISTRY}}/${{env.REPOSITORY_NAME}}:${{env.BUILD_VERSION}}-${{github.run_number}}
      - run: sleep 30
 
  trigger-deployment:
    needs: [build]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest        
    steps:
    - name: Generate token
      id: generate_token
      uses: tibdex/github-app-token@v1
      with:
          private_key: ${{ secrets.PLAT_LCT_GHAPP_PRIV_KEY }}
          app_id: ${{ secrets.PLAT_LCT_GHAPP_ID }}
    - name: Trigger deployment
      uses: convictional/trigger-workflow-and-wait@v1.3.0
      with:
          owner: BY-Product-Development
          repo: plat-lct-deployment
          github_token: ${{ steps.generate_token.outputs.token }}
          workflow_file_name: branch.yml
          ref: ${{github.ref}}
          wait_workflow: true
          inputs: '{"targetProduct":"${{env.TARGET_PRODUCT}}"}'
