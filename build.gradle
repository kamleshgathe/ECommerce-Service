buildscript {
    ext {

        springBootVersion = '2.2.8.RELEASE'
    }
    repositories {
        mavenLocal()
        maven {
            url "${artifactoryContextUrl}/jda-dev-repositories"
            credentials {
                username = artifactoryUsername
                password = artifactoryPassword
            }
        }
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}",
                  "info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0"
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.9.0"
    id "org.sonarqube" version "2.6.2"
    id "com.github.hierynomus.license" version "0.15.0"
}


apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.artifactory'
//apply plugin: 'nebula.release'
//apply plugin: 'nebula.maven-publish'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: 'info.solidsoft.pitest'

checkstyle {
    toolVersion "8.8"
}

version "${version}"

depVersion = "${depVersion}"

group 'com.jda.dct'
springBoot {
    mainClassName = 'com.jda.dct.chatservice.ChatServiceApplication'
    buildInfo()
}
artifactory {
    contextUrl = "${artifactoryContextUrl}"
    publish {
        repository {
            if (version.contains('snapshot') || version.contains('SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'
            username = "${artifactoryUsername}"
            password = "${artifactoryPassword}"
        }
        defaults {
            publishArtifacts = true
            publications('mavenJava')
        }
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}


configurations {
    runtime.exclude group: "org.codehaus.groovy", module: "groovy-testng"
    
    all {
        resolutionStrategy {
            eachDependency {
                 drd ->
                    if (drd.requested.group == 'org.springframework.kafka') {
                        drd.useVersion '2.2.4.RELEASE'
                    }
            }
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    zip
}

repositories {
    mavenLocal()
    maven {
        url "${artifactoryContextUrl}/jda-dev-repositories"
        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }
}



dependencies {
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.6'

    compile 'org.springframework.data:spring-data-commons'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    /*compile 'org.springframework.boot:spring-boot-starter-security'*/

    compile group: "com.jda.dct", name: "toys", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "igniteconfig", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "persist", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "tenantutils", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "kafkaclient", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "search", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "ingest", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "app", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "core", version: "${depVersion}", changing: true
    compile group: "com.jda.dct", name: "push-notification", version: "${depVersion}", changing: true

    compile group: 'org.elasticsearch', name: 'elasticsearch', version: '6.3.2'
    compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: '6.3.2'
    compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: '6.3.2'

    compile 'com.jsoniter:jsoniter:0.9.19'

    zip group: 'com.jda.dct', name: 'cicd', version: '0.0.1-SNAPSHOT', classifier: 'appdynamics-container-config', ext: 'zip'
    runtime group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    runtime group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '2.4.0'
    runtime group: 'net.bytebuddy', name: 'byte-buddy', version: '1.10.2'

    testCompile 'org.mockito:mockito-core'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'junit:junit'

    // mandatory dependencies for using Spock
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"

    // optional dependencies for using Spock
    testRuntime "net.bytebuddy:byte-buddy:1.6.5"          // allows mocking of classes (in addition to interfaces)

    testCompile 'org.spockframework:spock-spring:1.1-groovy-2.4'

}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = ['com.jda.dct.*']
            excludes = ['com.jda.dct.chatservice.dto.downstream.*',
                        'com.jda.dct.chatservice.dto.upstream.*',
                        'com.jda.dct.chatservice.config.*',
                        'com.jda.dct.chatservice.constants.*',
                        'com.jda.dct.chatservice.ChatServiceApplication']
            limit {
                counter = 'LINE'
                minimum = 0.80
            }
        }
    }
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}

repositories {
    mavenLocal()
    maven {
        url "${artifactoryContextUrl}/jda-dev-repositories"
        credentials {
            username = artifactoryUsername
            password = artifactoryPassword
        }
    }
}

task unzip {
    doLast {
        println "Dependencies:"
        configurations.zip.each {
            println it
            def zipFile = file(it)
            def outputDir = file("${buildDir}")
            copy {
                from zipTree(zipFile)
                into outputDir
            }
        }
    }
}

task classpathJar(type: Jar) {
    inputs.files sourceSets.test.runtimeClasspath

    archiveName = "runboot-classpath.jar"
    doFirst {
        // If run in configuration phase, some artifacts may not exist yet (after clean)
        // and File.toURI canâ€™t figure out what is directory to add the critical trailing slash.
        manifest {
            def classpath = sourceSets.test.runtimeClasspath.files
            attributes "Class-Path": classpath.collect {f -> f.toURI().toString()}.join(" ")
        }
    }
}

bootRun {
    classpath = classpathJar.outputs.files
    systemProperties = System.properties
    systemProperty 'spring.profiles.active', 'development'
    jvmArgs('-Djava.util.logging.config.file=none')
}



test {
    systemProperties = System.properties
    systemProperty 'spring.profiles.active', 'development'
    jvmArgs('-Djava.util.logging.config.file=none')
}

pitest {
    threads = 4
    outputFormats = ['XML','HTML']
    useClasspathFile = true
    timestampedReports = false
}

license {
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    includes(["**/*.java", "**/*.groovy"])
}
classes.dependsOn(licenseFormat)

bootJar.dependsOn unzip
jar.enabled = true

// tasks.release.dependsOn tasks.bootJar
